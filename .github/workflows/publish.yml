name: Publish Package

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-rust:
    name: Build Rust Library (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build Rust Library
        run: |
          cd rust-pty
          cargo build --release
      
      - name: Prepare Linux library
        if: runner.os == 'Linux'
        run: |
          mv rust-pty/target/release/librust_pty.so librust_pty_$(uname -m).so
      
      - name: Upload Linux library
        if: runner.os == 'Linux'
        uses: svenstaro/upload-release-action@v2
        with:
          file: librust_pty_*.so
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      
      - name: Prepare macOS library
        if: runner.os == 'macOS'
        run: |
          mv rust-pty/target/release/librust_pty.dylib librust_pty_$(uname -m).dylib
      
      - name: Upload macOS library
        if: runner.os == 'macOS'
        uses: svenstaro/upload-release-action@v2
        with:
          file: librust_pty_*.dylib
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      
      - name: Upload Windows library
        if: runner.os == 'Windows'
        uses: svenstaro/upload-release-action@v2
        with:
          file: rust-pty/target/release/rust_pty.dll
          tag: ${{ github.ref }}
          overwrite: true

  publish:
    name: Publish to npm
    needs: build-rust
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install Dependencies
        run: bun install
      
      - name: Create release directory
        run: |
          mkdir -p rust-pty/target/release
      
      - name: Download Release Assets
        run: |
          # Create necessary directories
          mkdir -p rust-pty/target/release
          
          # Get release tag
          TAG="${{ github.ref_name }}"
          if [[ -z "$TAG" ]]; then
            TAG="${{ github.ref }}"
            TAG=${TAG#refs/tags/}
          fi
          
          # Download assets
          curl -L "https://github.com/${{ github.repository }}/releases/download/$TAG/librust_pty_aarch64.so" -o "rust-pty/target/release/librust_pty.so" || echo "Failed to download Linux library"
          curl -L "https://github.com/${{ github.repository }}/releases/download/$TAG/rust_pty.dll" -o "rust-pty/target/release/rust_pty.dll" || echo "Failed to download Windows library"
          curl -L "https://github.com/${{ github.repository }}/releases/download/$TAG/librust_pty_arm64.dylib" -o "rust-pty/target/release/librust_pty.dylib" || echo "Failed to download macOS library"
          
          # List files
          ls -la rust-pty/target/release/
      
      - name: Build TypeScript
        run: bun run build:ts
      
      - name: Set up npm authentication
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
      
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 