name: publish

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write     # for npm provenance

env:
  CARGO_TERM_COLOR: always
  # Directory where we expect the .so/.dylib/.dll to live *inside* the package
  RELEASE_DIR: rust-pty/target/release

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # ── Linux (glibc) x86_64 ────────────────────────────────────────────
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            out:    librust_pty.so
          # ── Linux (glibc) arm64 (cross-compile) ─────────────────────────────
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            out:    librust_pty_arm64.so
          # ── macOS Intel ─────────────────────────────────────────────────────
          - runner: macos-latest
            target: x86_64-apple-darwin
            out:    librust_pty.dylib
          # ── macOS Apple Silicon ─────────────────────────────────────────────
          - runner: macos-latest
            target: aarch64-apple-darwin
            out:    librust_pty_arm64.dylib
          # ── Windows x86_64 ──────────────────────────────────────────────────
          - runner: windows-latest
            target: x86_64-pc-windows-gnu
            out:    rust_pty.dll

    steps:
      - uses: actions/checkout@v4

      # --- Rust toolchain (with target)  ------------------------------------
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2

      - name: Build rust-pty
        run: |
          cd rust-pty
          cargo build --release --target ${{ matrix.target }}

      # Package artefact
      - name: Collect artefact
        shell: bash
        run: |
          mkdir -p out
          cp rust-pty/target/${{ matrix.target }}/release/*.{so,dylib,dll} out/${{ matrix.out }}

      - uses: actions/upload-artifact@v4
        with:
          name: libs
          path: out/*
          if-no-files-found: error

  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1
        with: {bun-version: latest}

      - name: install JS deps
        run: bun install --production

      - name: download compiled libs
        uses: actions/download-artifact@v4
        with:
          name: libs
          path: ${{ env.RELEASE_DIR }}

      - name: list libs
        run: ls -R ${{ env.RELEASE_DIR }}

      - name: build TypeScript
        run: bun run build:ts    

      - name: publish to npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          npm publish --provenance
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
